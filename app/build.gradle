plugins {
    id 'com.android.application'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.appdistribution'
    id 'com.google.firebase.crashlytics'
}
android {
    buildToolsVersion "30.0.3"
    compileSdkVersion 31
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['libs']
        }

    }
    packagingOptions {
        exclude 'META-INF/robovm/ios/robovm.xml'
    }
    defaultConfig {

        applicationId "com.anotherworld.elbrium"
        minSdkVersion 19 //16
        targetSdkVersion 31
        versionCode 9
        versionName "1.4-stable"
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}


// called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
//configurations { natives }

task copyAndroidNatives {
    doFirst {
        file("libs/armeabi/").mkdirs()
        file("libs/armeabi-v7a/").mkdirs()
        file("libs/arm64-v8a/").mkdirs()
        file("libs/x86_64/").mkdirs()
        file("libs/x86/").mkdirs()

        configurations.getByName("natives").copy().files.each { jar ->
            def outputDir = null
            if (jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
            if (jar.name.endsWith("natives-armeabi.jar")) outputDir = file("libs/armeabi")
            if (jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
            if (jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
            if (jar.name.endsWith("natives-x86_64.jar")) outputDir = file("libs/x86_64")
            if (outputDir != null) {
                copy {
                    from zipTree(jar)
                    into outputDir
                    include "*.so"
                }
            }
        }
    }
}

tasks.whenTaskAdded { packageTask ->
    if (packageTask.name.contains("com.anotherworld.elbrium")) {
        packageTask.dependsOn 'copyAndroidNatives'
    }
}

task run(type: Exec) {
    def path
    def localProperties = project.file("../local.properties")
    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream { instr ->
            properties.load(instr)
        }
        def sdkDir = properties.getProperty('sdk.dir')
        if (sdkDir) {
            path = sdkDir
        } else {
            path = "$System.env.ANDROID_HOME"
        }
    } else {
        path = "$System.env.ANDROID_HOME"
    }

    def adb = path + "/platform-tools/adb"
    commandLine "$adb", 'shell', 'am', 'start', '-n', 'com.anotherworld.elbrium/com.anotherworld.elbrium.AndroidLauncher'
}

//sourceCompatibility = 1.7
//apply plugin: 'com.android.application'
dependencies {
    //implementation "org.gradle:gradle-core:2.2"
    implementation "org.mockito:mockito-core:1.9.5:javadoc"
    implementation platform('com.google.firebase:firebase-bom:25.12.0'){
        exclude group: 'com.google.guava'
    }
    //implementation "pl.mk5.gdx-fireapp:gdx-fireapp-android:2.1.0"
    //implementation "pl.mk5.gdx-fireapp:gdx-fireapp-core:2.1.0"
    implementation 'androidx.preference:preference:1.1.1'
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation ('com.google.firebase:firebase-crashlytics:18.2.6'){
        exclude group: 'com.google.guava'
    }
    implementation 'org.jetbrains:annotations:15.0'
    testImplementation 'junit:junit:4.13.2'
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
    implementation ('com.firebaseui:firebase-ui:2.1.0'){
        exclude group: 'com.google.guava'
    }
    implementation 'androidx.multidex:multidex:2.0.1'
    //implementation 'com.google.firebase:firebase-analytics'
    implementation ('com.google.firebase:firebase-analytics:20.0.2'){
        exclude group: 'com.google.guava'
    }
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    //implementation 'com.google.firebase:firebase-messaging:22.0.0'
    implementation ('com.google.firebase:firebase-inappmessaging-display:20.1.1'){
        exclude group: 'com.google.guava'
    }

    implementation 'com.google.android.gms:play-services-auth:20.0.1'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    implementation 'com.google.firebase:firebase-core:20.0.2'
    implementation 'com.google.firebase:firebase-auth:21.0.1'
    implementation 'com.google.firebase:firebase-database:20.0.3'
    implementation 'cn.zhaiyifan:rememberedittext:0.9.0'
    implementation 'com.squareup.picasso:picasso:2.71828'

    implementation 'com.google.guava:listenablefuture:9999.0-empty-to-avoid-conflict-with-guava'

    api "com.badlogicgames.gdx:gdx:$gdxVersion"
    api "com.badlogicgames.gdx:gdx-bullet:$gdxVersion"
    api "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
    api "com.badlogicgames.gdx:gdx-box2d:$gdxVersion"
    api "com.badlogicgames.gdx:gdx-controllers:$gdxVersion"
    api "com.badlogicgames.ashley:ashley:$ashleyVersion"
    api "com.badlogicgames.gdx:gdx-ai:$aiVersion"
    api "com.badlogicgames.box2dlights:box2dlights:$box2DLightsVersion"

    implementation 'com.google.code.gson:gson:2.8.6'

    api "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"

}
repositories {
    mavenCentral()
}

